import { Refine, IResourceItem, Action, Authenticated } from "@refinedev/core";

import { IconPaw } from "@tabler/icons";

import {
  ErrorComponent,
  notificationProvider,
  RefineThemes,
  ThemedLayoutV2,
  ThemedTitleV2,
} from "@refinedev/mantine";

import { dataProvider } from "./rest-data-provider";
import { MantineProvider, Global } from "@mantine/core";
import { NotificationsProvider } from "@mantine/notifications";
import { BrowserRouter, Route, Routes, Outlet } from "react-router-dom";
import routerBindings, {
  UnsavedChangesNotifier,
  DocumentTitleHandler,
  NavigateToResource,
  CatchAllNavigate,
} from "@refinedev/react-router-v6";
import axios from "axios";
import { Header, Footer } from "./components";
import {
  BottleCreateEdit,
  BottleList,
  BottleShow,
} from "./pages/bottles/index.js";
import { authProvider } from "./AuthProvider.js";

function App() {
  const docTitleHandler: (options: {
    resource?: IResourceItem;
    action?: Action;
    params?: Record<string, string | undefined>;
    pathname?: string;
    autoGeneratedTitle: string;
  }) => string = (options) => {
    if (!options.action) return "Wine";

    switch (options.action) {
      case "list":
        return `${options.resource?.meta?.label} | Wine`;
      case "create":
        return `Create new ${options.resource?.name} | Wine`;
      case "show":
        return `Show ${options.resource?.name} #${options.params?.id} | Wine`;
      case "edit":
        return `Edit ${options.resource?.name} #${options.params?.id} | Wine`;
      case "clone":
        return `Clone ${options.resource?.name} #${options.params?.id} | Wine`;
    }
  };

  return (
    <BrowserRouter>
      <MantineProvider
        theme={{ ...RefineThemes.Orange }}
        withNormalizeCSS
        withGlobalStyles
      >
        <Global styles={{ body: { WebkitFontSmoothing: "auto" } }} />
        <NotificationsProvider position="top-right">
          <Refine
            dataProvider={dataProvider(import.meta.env.VITE_API_URL, axios)}
            notificationProvider={notificationProvider}
            routerProvider={routerBindings}
            authProvider={authProvider}
            resources={[
              {
                name: "bottles",
                list: "/bottles",
                create: "/bottles/create",
                edit: "/bottles/edit/:id",
                show: "/bottles/show/:id",
                meta: {
                  label: "Bottles",
                  canDelete: true,
                  icon: <IconPaw />,
                },
              },
            ]}
            options={{
              syncWithLocation: true,
              warnWhenUnsavedChanges: true,
              projectId: "5HCION-ei6sWO-B6Tbks",
            }}
          >
            <Routes>
              <Route
                element={
                  <Authenticated
                    key="authenticated-inner"
                    v3LegacyAuthProviderCompatible={false}
                  >
                    <ThemedLayoutV2
                      Header={() => <Header sticky />}
                      Title={({ collapsed }) => (
                        <ThemedTitleV2
                          text="Wine"
                          icon={<IconPaw />}
                          collapsed={collapsed}
                        />
                      )}
                      Footer={() => <Footer />}
                    >
                      <Outlet />
                    </ThemedLayoutV2>
                  </Authenticated>
                }
              >
                <Route
                  index
                  element={<NavigateToResource resource="bottles" />}
                />
                <Route path="/bottles">
                  <Route index element={<BottleList />} />
                  <Route path="create" element={<BottleCreateEdit create />} />
                  <Route path="edit/:id" element={<BottleCreateEdit />} />
                  <Route path="show/:id" element={<BottleShow />} />
                </Route>
                <Route path="*" element={<ErrorComponent />} />
              </Route>
            </Routes>
            <UnsavedChangesNotifier />
            <DocumentTitleHandler handler={docTitleHandler} />
          </Refine>
        </NotificationsProvider>
      </MantineProvider>
    </BrowserRouter>
  );
}

export default App;
